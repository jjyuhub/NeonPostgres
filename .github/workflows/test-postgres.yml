name: Ultimate PostgreSQL Feature Showcase

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test-database:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install PostgreSQL Client & Extensions
        run: sudo apt-get install -y postgresql-client postgresql-contrib

      - name: Run PostgreSQL Feature Tests
        env:
          PGHOST: ${{ secrets.PGHOST }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGUSER: ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGSSLMODE: ${{ secrets.PGSSLMODE }}
        run: |
          echo "🛠️ Testing PostgreSQL Connection..."
          psql -c "SELECT version();"

          echo "🔄 Enabling Extensions (Only if Available)..."
          psql -c "
          CREATE EXTENSION IF NOT EXISTS hstore;
          CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
          CREATE EXTENSION IF NOT EXISTS pgcrypto;
          CREATE EXTENSION IF NOT EXISTS citext;
          CREATE EXTENSION IF NOT EXISTS postgres_fdw;"

          echo "📌 1️⃣ Partitioning & Sharding (Fixed)"
          psql -c "
          DROP TABLE IF EXISTS sales CASCADE;

          CREATE TABLE sales (
            id SERIAL,
            region TEXT NOT NULL,
            amount NUMERIC(10,2) NOT NULL,
            created_at TIMESTAMP DEFAULT now(),
            CONSTRAINT sales_unique UNIQUE (id, region)
          ) PARTITION BY LIST (region);

          CREATE TABLE sales_us PARTITION OF sales FOR VALUES IN ('US');
          CREATE TABLE sales_eu PARTITION OF sales FOR VALUES IN ('EU');
          CREATE TABLE sales_other PARTITION OF sales DEFAULT;"

          psql -c "INSERT INTO sales (region, amount) VALUES ('US', 100), ('EU', 200), ('ASIA', 300);"
          psql -c "SELECT tableoid::regclass, * FROM sales;"

          echo "🌍 2️⃣ Foreign Data Wrappers (FDW) - Fixed"
          psql -c "
          DROP SERVER IF EXISTS remotepg CASCADE;
          CREATE SERVER remotepg FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host '${PGHOST}', dbname '${PGDATABASE}', port '5432');
          CREATE USER MAPPING IF NOT EXISTS FOR CURRENT_USER SERVER remotepg OPTIONS (user '${PGUSER}', password '${PGPASSWORD}');
          DROP FOREIGN TABLE IF EXISTS foreign_users;
          CREATE FOREIGN TABLE foreign_users (id SERIAL, name TEXT, email TEXT) SERVER remotepg OPTIONS (schema_name 'public', table_name 'users');
          SELECT * FROM foreign_users;"

          echo "🔄 3️⃣ Logical & Streaming Replication"
          psql -c "SELECT * FROM pg_replication_slots;"

          echo "🚀 4️⃣ Parallel Query Execution"
          psql -c "EXPLAIN ANALYZE SELECT * FROM sales ORDER BY amount DESC;"

          echo "📜 5️⃣ PL/pgSQL & Procedural Languages"
          psql -c "
          CREATE OR REPLACE FUNCTION add_transaction(user_id INTEGER, amount NUMERIC) RETURNS VOID AS \$\$
          BEGIN
            INSERT INTO transactions (user_id, amount) VALUES (user_id, amount);
          END;
          \$\$ LANGUAGE plpgsql;
          SELECT add_transaction(1, 500);"

          echo "🔢 6️⃣ Custom Aggregates & Extensions"
          psql -c "
          DROP AGGREGATE IF EXISTS sum_sq(NUMERIC);
          CREATE AGGREGATE sum_sq(NUMERIC) (
            SFUNC = numeric_add,
            STYPE = NUMERIC,
            INITCOND = '0'
          );
          SELECT sum_sq(amount) FROM transactions;"

          echo "🔒 7️⃣ Advanced Security: RLS & Auditing"
          psql -c "
          ALTER TABLE users ENABLE ROW LEVEL SECURITY;
          CREATE POLICY user_isolation ON users FOR SELECT USING (email = current_user);
          SELECT * FROM users;"

          echo "📈 8️⃣ Performance Tuning (Indexing, VACUUM, ANALYZE) - Fixed"
          psql -c "CREATE INDEX idx_sales_amount ON sales(amount);"

          echo "Running VACUUM separately (fixing transaction issue)..."
          psql -v ON_ERROR_STOP=1 -c "VACUUM ANALYZE sales;"

          echo "Running EXPLAIN ANALYZE to confirm indexing..."
          psql -c "EXPLAIN ANALYZE SELECT * FROM sales WHERE amount > 100;"

          echo "✅ ALL TESTS COMPLETED SUCCESSFULLY!"
